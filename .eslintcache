[{"/Users/shukezeng/Desktop/mcit-job/MCIT-Hackathon-2021/src/index.js":"1","/Users/shukezeng/Desktop/mcit-job/MCIT-Hackathon-2021/src/reportWebVitals.js":"2","/Users/shukezeng/Desktop/mcit-job/MCIT-Hackathon-2021/src/App.js":"3","/Users/shukezeng/Desktop/mcit-job/MCIT-Hackathon-2021/src/SearchJobs.js":"4"},{"size":500,"mtime":1610553053117,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1610553053118,"results":"7","hashOfConfig":"6"},{"size":490,"mtime":1610671001751,"results":"8","hashOfConfig":"6"},{"size":6413,"mtime":1610736137547,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"aybn88",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/shukezeng/Desktop/mcit-job/MCIT-Hackathon-2021/src/index.js",[],["20","21"],"/Users/shukezeng/Desktop/mcit-job/MCIT-Hackathon-2021/src/reportWebVitals.js",[],"/Users/shukezeng/Desktop/mcit-job/MCIT-Hackathon-2021/src/App.js",[],"/Users/shukezeng/Desktop/mcit-job/MCIT-Hackathon-2021/src/SearchJobs.js",["22"],"import './SearchJobs.css'\nimport React, {Component} from \"react\"\n\nclass SearchJobs extends Component {\n\n    state = {\n        jobs: [],\n        job: {\n            firstName: \"\",\n            lastName: \"\",\n            gradDate: \"\",\n            jobBefore: \"\",\n            jobAfter: \"\",\n            willMentor: \"\",\n            contact: \"\"\n        }\n    }\n    componentDidMount() {\n        this.getJobs()\n    }\n\n    getJobs = () => {\n        const url = \"http://localhost:3001/products\"\n        fetch(url)\n            .then(response => response.json())\n            .then(response => this.setState({jobs: response.data}))\n            .catch (err => console.error(err))\n    }\n\n    addJob = _ => {\n        const {job} = this.state;\n        fetch(`http://localhost:3001/api/insert?firstName=${job.firstName}&lastName=${job.lastName}&gradDate=${job.gradDate}&jobBefore=${job.jobBefore}&jobAfter=${job.jobAfter}&willMentor=${job.willMentor}&contact=${job.contact}`)\n            .then(response => response.json())\n            .then(this.getJobs)\n            .catch(err => console.error(err))\n    }\n\n    renderJobs = (name) => <div className=\"job-card\">\n        <div className=\"name\">{name.firstName} {name.lastName}</div>\n        <div className=\"grad-date\">Year of {name.gradDate}</div>\n        <div className=\"job-before\"><strong>Job Before MCIT:</strong> {name.jobBefore}</div>\n        <div className=\"job-after\"><strong>Job After MCIT:</strong> {name.jobAfter}</div>\n        <div className=\"will-mentor\"><strong>Willing to Mentor:</strong> {name.willMentor}</div>\n        <div className=\"contact\"><strong>Contact:</strong> {name.contact}</div>\n    </div>\n    render() {\n        const { jobs, job } = this.state;\n        console.log(jobs);\n        return (\n            <div>\n                <form className=\"search-network\">\n                    <label className=\"label\" htmlFor=\"query\">First Name</label>\n                    <input className=\"input\" \n                    type=\"text\" \n                    name=\"query\" \n                    placeholder=\"i.e. Jane\" \n                    value={job.firstName} \n                    onChange={e => this.setState({ job: {...job, firstName: e.target.value} })}\n                    />\n\n                    <label className=\"label\" htmlFor=\"query\">Last Name</label>\n                    <input className=\"input\" \n                    type=\"text\" \n                    name=\"query\" \n                    placeholder=\"i.e. Doe\" \n                    value={job.lastName} \n                    onChange={e=>this.setState({ job: {...job, lastName: e.target.value} })}\n                    />\n\n                    <label className=\"label\" htmlFor=\"query\">Graduation Year</label>\n                    <input className=\"input\" \n                    type=\"text\" \n                    name=\"query\" \n                    placeholder=\"i.e. 2022\" \n                    value={job.gradDate} \n                    onChange={e=>this.setState({ job: {...job, gradDate: e.target.value} })}\n                    />\n\n                    <label className=\"label\" htmlFor=\"query\">Job Before MCIT</label>\n                    <input className=\"input\" \n                    type=\"text\" \n                    name=\"query\" \n                    placeholder=\"i.e. Software Engineer\" \n                    value={job.jobBefore} \n                    onChange={e=>this.setState({ job: {...job, jobBefore: e.target.value} })}\n                    />\n\n                    <label className=\"label\" htmlFor=\"query\">Job After MCIT</label>\n                    <input className=\"input\" \n                    type=\"text\" \n                    name=\"query\" \n                    placeholder=\"i.e. Software Engineer\" \n                    value={job.jobAfter} \n                    onChange={e=>this.setState({ job: {...job, jobAfter: e.target.value} })}\n                    />\n\n                    <label className=\"label\" htmlFor=\"query\">Willing to Mentor</label>\n                    <input className=\"input\" \n                    type=\"text\" \n                    name=\"query\" \n                    placeholder=\"i.e. Yes/No\" \n                    value={job.willMentor} \n                    onChange={e=>this.setState({ job: {...job, willMentor: e.target.value} })}\n                    />\n\n                    <label className=\"label\" htmlFor=\"query\">Contact Info</label>\n                    <input className=\"input\" \n                    type=\"text\" \n                    name=\"query\" \n                    placeholder=\"i.e. doejane@gmail.com\" \n                    value={job.contact} \n                    onChange={e=>this.setState({ job: {...job, contact: e.target.value} })}\n                    /> \n\n                    <button className=\"button\" type=\"submit\" onClick={this.addJob}>Submit</button>\n                </form>\n                \n                <div className=\"card-container\">\n                    {jobs.map(this.renderJobs)}\n                </div> \n            </div>\n            \n      )\n    }\n}\n\n{/*function SearchJobs() {\n\n    const [query, setQuery] = useState(\"\");\n\n    const [jobs, setJobs] = useState([]);\n    async function searchJobs(e) {\n        e.preventDefault()\n        \n        const url = `http://localhost:8081/emotions`\n\n        try {\n            const response = await fetch(url);\n            const data = await response.json();\n            setJobs(data.results);\n        } catch(err) {\n            console.error(err);\n        }\n    }\n    return (\n        <div>\n\n\n\n                <form className=\"search-jobs\" onSubmit={searchJobs}>\n                <label className=\"label\" htmlFor=\"query\">Job Title</label>\n                <input className=\"input\" type=\"text\" name=\"query\" \n                placeholder=\"i.e. Software Engineering\"\n                value={query} onChange={(e) => setQuery(e.target.value)}\n                />\n                <button className=\"button\" type=\"submit\">Search</button>\n            </form>\n            <div className=\"card-list\">\n                {jobs.map(job => (\n                    <div className=\"card\" key={job.id}>\n                        <h3 className=\"title\">{job.title}</h3>\n                        <p className=\"date\"><small>Date Posted: {job.release_date}</small></p>\n                        <p className=\"description\">Description: {job.overview}</p>\n                    </div>\n                ))}\n            </div> \n        </div>\n        \n    )\n}\n*/}\n\nexport default SearchJobs",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":127,"column":1,"nodeType":"29","messageId":"30","endLine":171,"endColumn":4},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-global-assign","no-unsafe-negation"]